# p4testgen seed: 99999
# Date generated: 2023-09-10-11:38:57.753
# Current statement coverage: 0.66
# Traces
# [Parser] MyParser
# [State] start
# [ExtractSuccess] headers.ethernet@0 | Condition: |*packetLen_bits(bit<32>)| >= 112; | Extract Size: 112 -> headers.ethernet.dstAddr = 0x2AF6_F948_B72F | headers.ethernet.srcAddr = 0x7211_D066_5918 | headers.ethernet.etherType = 0x86DD
# [State] parseIpv6
# [ExtractSuccess] headers.ipv6@112 | Condition: |*packetLen_bits(bit<32>)| >= 304; | Extract Size: 192 -> headers.ipv6.version = 0x0 | headers.ipv6.dscp = 0x00 | headers.ipv6.ecn = 0x0 | headers.ipv6.flowLabel = 0x0000_0000 | headers.ipv6.payloadLength = 0x0000 | headers.ipv6.nextHeader = 0x04 | headers.ipv6.hopLimit = 0x01 | headers.ipv6.srcAddr = 0xE775_FF3F_FFAF_DFB3 | headers.ipv6.dstAddr = 0xF3BD_3F3F_BF9B_BEE9
# [State] parseInnerIpv4
# [ExtractSuccess] headers.innerIpv4@304 | Condition: |*packetLen_bits(bit<32>)| >= 464; | Extract Size: 160 -> headers.innerIpv4.version = 0x0 | headers.innerIpv4.ihl = 0x0 | headers.innerIpv4.diffserv = 0x00 | headers.innerIpv4.totalLen = 0x0000 | headers.innerIpv4.identification = 0x0000 | headers.innerIpv4.flags = 0x0 | headers.innerIpv4.fragOffset = 0x0000 | headers.innerIpv4.ttl = 0x00 | headers.innerIpv4.protocol = 0x06 | headers.innerIpv4.hdrChecksum = 0x0000 | headers.innerIpv4.srcAddr = 0x0000_0000 | headers.innerIpv4.dstAddr = 0x0000_0000
# [State] parseTcp
# [ExtractSuccess] headers.tcp@464 | Condition: |*packetLen_bits(bit<32>)| >= 624; | Extract Size: 160 -> headers.tcp.srcPort = 0xE67B | headers.tcp.dstPort = 0xC7AC | headers.tcp.seqNo = 0x0000_0000 | headers.tcp.ackNo = 0x0000_0000 | headers.tcp.dataOffset = 0x0 | headers.tcp.res = 0x0 | headers.tcp.flags = 0x00 | headers.tcp.window = 0x0000 | headers.tcp.checksum = 0x0000 | headers.tcp.urgentPtr = 0x0000
# [State] accept
# [Control MyVerifyChecksum start]
# [Control MyIngress start]
# [mark_to_drop executed.]
# [Table Branch: MyIngress.validate.validate | Key(s): |bmv2_ingress_port(bit<9>)|, |pktvar_2(bit<16>)|, TaintedExpression(bit<12>), TaintedExpression(bit<16>), (bit<1>)0;, (bit<1>)0;, (bit<1>)1;, (bit<1>)1;| Chosen action: MyIngress.validate.setValidated]
# [If Statement]: true -> 1; -> true
# [Internal If Statement]: 0; -> 0; -> false
# [Internal If Statement]: 1; -> 1; -> true
# [Table Branch: MyIngress.route.ipv6Route | Key(s): |pktvar_11(bit<64>)|| Chosen action: MyIngress.route.setForwarding]
# [Assume: applying condition: 0 < |MyIngress.route.ipv6Route_arg_MyIngress.route.setForwarding1(bit<9>)| && |MyIngress.route.ipv6Route_arg_MyIngress.route.setForwarding1(bit<9>)| <= 64;]
# [If Statement]: metadata.l3Protocol == 4 -> |pktvar_20(bit<8>)| == 4; -> false
# [Table Branch: MyIngress.acl.acl | Key(s): |bmv2_ingress_port(bit<9>)|, |MyIngress.route.ipv6Route_arg_MyIngress.route.setForwarding1(bit<9>)|, 0, |pktvar_1(bit<48>)|, |pktvar_0(bit<48>)|, |pktvar_2(bit<16>)|, TaintedExpression(bit<32>), TaintedExpression(bit<32>), TaintedExpression(bit<8>), |pktvar_10(bit<64>)|, |pktvar_11(bit<64>)|, |pktvar_9(bit<8>)|, |pktvar_20(bit<8>)|, |pktvar_24(bit<16>)|, |pktvar_25(bit<16>)|| Chosen action: MyIngress.acl.allow]
# [If Statement]: true -> 1; -> true
# [If Statement]: false -> 0; -> false
# [If Statement]: true -> 1; -> true
# [Internal If Statement]: 0; -> 0; -> false
# [Internal If Statement]: 1; -> 1; -> true
# [If Statement]: headers.ipv6.hopLimit == 0 -> |pktvar_9(bit<8>)| + 255 == 0; -> true
# [If Statement]: false -> 0; -> false
# [Internal If Statement]: 0 != 0; -> 0 != 0; -> false
# [Control MyEgress start]
# [Control MyUpdateChecksum start]
# [Control MyDeparser start]
# [Emit] headers.ethernet -> headers.ethernet.dstAddr = 0x0000_0000_0000 | headers.ethernet.srcAddr = 0x7211_D066_5918 | headers.ethernet.etherType = 0x86DD
# [Invalid emit: headers.vlan]
# [Invalid emit: headers.ipv4]
# [Emit] headers.ipv6 -> headers.ipv6.version = 0x0 | headers.ipv6.dscp = 0x00 | headers.ipv6.ecn = 0x0 | headers.ipv6.flowLabel = 0x0000_0000 | headers.ipv6.payloadLength = 0x0000 | headers.ipv6.nextHeader = 0x04 | headers.ipv6.hopLimit = 0x00 | headers.ipv6.srcAddr = 0xE775_FF3F_FFAF_DFB3 | headers.ipv6.dstAddr = 0xF3BD_3F3F_BF9B_BEE9
# [Emit] headers.innerIpv4 -> headers.innerIpv4.version = 0x0 | headers.innerIpv4.ihl = 0x0 | headers.innerIpv4.diffserv = 0x00 | headers.innerIpv4.totalLen = 0x0000 | headers.innerIpv4.identification = 0x0000 | headers.innerIpv4.flags = 0x0 | headers.innerIpv4.fragOffset = 0x0000 | headers.innerIpv4.ttl = 0x00 | headers.innerIpv4.protocol = 0x06 | headers.innerIpv4.hdrChecksum = 0x0000 | headers.innerIpv4.srcAddr = 0x0000_0000 | headers.innerIpv4.dstAddr = 0x0000_0000
# [Emit] headers.tcp -> headers.tcp.srcPort = 0xE67B | headers.tcp.dstPort = 0xC7AC | headers.tcp.seqNo = 0x0000_0000 | headers.tcp.ackNo = 0x0000_0000 | headers.tcp.dataOffset = 0x0 | headers.tcp.res = 0x0 | headers.tcp.flags = 0x00 | headers.tcp.window = 0x0000 | headers.tcp.checksum = 0x0000 | headers.tcp.urgentPtr = 0x0000
# [Invalid emit: headers.udp]
# [Prepending the emit buffer to the program packet]
# [Internal If Statement]: 511 == 511; -> 511 == 511; -> true
# [Packet marked dropped]

# Table MyIngress.validate.validate
add "MyIngress.validate.validate" 1 "headers.ethernet.etherType":0x86DD "headers.innerIpv4.$valid$":0x1 "headers.ipv4.$valid$":0x0 "headers.ipv6.$valid$":0x1 "headers.vlan.$valid$":0x0 "headers.vlan.etherType":0b**************** "headers.vlan.vlanId":0b************ "standard_metadata.ingress_port":0x1F4 "MyIngress.validate.setValidated"()

# Table MyIngress.route.ipv6Route
add "MyIngress.route.ipv6Route" 1 "headers.ipv6.dstAddr":0b*111*01*10*1**010*11*1*100*11*111**1111110****1*1**1**1**1**10** "MyIngress.route.setForwarding"("dstAddr":0x000000000000,"egressPort":0x040)

# Table MyIngress.acl.acl
add "MyIngress.acl.acl" 1 "headers.ethernet.dstAddr":0x2AF6F948B72F "headers.ethernet.etherType":0x86DD "headers.ethernet.srcAddr":0x7211D0665918 "headers.ipv4.dstAddr":0b******************************** "headers.ipv4.srcAddr":0b******************************** "headers.ipv4.ttl":0b******** "headers.ipv6.dstAddr":0b1111**111*111*010**11*1**0*111*1**11*11*1**1**1***111*1*1*1***** "headers.ipv6.hopLimit":0b****00*1 "headers.ipv6.srcAddr":0b1***011**111*10111111*110*11111111111*11**1*1111*1****11*0*10011 "metadata.egressPort":0b001**00** "metadata.l3Protocol":0b*00*01*0 "metadata.l4DstPort":0b1100**1110**1*** "metadata.l4SrcPort":0b*110*1**011***11 "metadata.vlan":0b0*00*000*00* "standard_metadata.ingress_port":0b11*1*01*0 "MyIngress.acl.allow"()


packet 500 2AF6F948B72F7211D066591886DD0000000000000401E775FF3FFFAFDFB3F3BD3F3FBF9BBEE90000000000000000000600000000000000000000E67BC7AC0000000000000000000000000000000014C5137C22297034252308F793411210BDD60497554AA9AD036AD75564219CD3A4D545BB92BF1B32D5EABA351D5187F242A92FAD32E91BFC4427859632AB8C8824A592AD8B507742C3DA933B510C3A9FFB89A67A019C32128E1F162FAF0D3CE9B3472FAFD3812A2181CA3B3987551CD2B06002FE101B3841634DFAE6569948550390462F617194F1AFFCA4149309D29F87400A0AED3B5AC6BE92EF4181C8D286BC98BE26091A1CF9E492E8A254B449755E5CFB45FE7AF7FDD109B8244C0A212361BD63D0EF54CD2B934F330EC2D067D381AE3A6BC26917A61DC5F8D14B6403C403911393FDDED3EA881FFD2DD313FFA6AFF45CD1244CCCB344A766298B231B26B56182F7ADE15980EB2BC7A4E85ED2F223BBE4B1F01FEF2181418BE8E20BC61E26C34E8F921518E39C1B4A7388447E9222B395CFAEC24410BDB62D3DDCF88EF0C7BBB685C762691996EEA77F1CFF01832DAFC4C20319A1E4131DC51818311EFC85C348637E4E38F31131EAAF880889EF3FA463E85C1AFDA5EEA7F5E67F5439828AE6E652B78E44CAEE355D47A6033247090804B5C1663A6A17C2E6615BFA21601D0DBAC4AFA6861BB0116DCD83E249CE8AB1579BFDE6ACF43AC221FA2222A88DE5432F85DDA46D90065AB4DAF163D0F081A327C109DFB5AAA00B2FB6F1927564B8E6A7A07D3A84BB96D9DD849D201ED99550ACD9719F42D6428E037571E7D4402021CBE6D9A51B966B14318B44074002E327CAA92C19BBC11ECCC0418263F579263477F8FA3012C5FAAD1CAE6C7E8AFD8AA8DC5A8F3468BE91B474C59388617AFD30C55BB71100C5822C9CA279771791791734A8D41BAA2999CD8CE457F3C0906FC69909E15CF6AC003A7DAB39DF40E2264A344B2FED0A5010FB818FDADE2328408CE1ED5687C4C3CBF9BB50A5259318F027F63F83E74D13637714978C30D8196DCC84A0C56A4192EFAF5A926D9F55CAFA96B24F40EBBE652AED45C0F7C9AF2DE3C18CFA19F722F36E7E397124A4B3C5F6D6F100016B7B2F89DDBF344F1C476FC4D63DDE95D013E286C936F5D76F21C1BD19FE9EB430C514F1006EBD9A42C5380A94F44D38DD79980FE30347F3D37E8EDCB8DBA55682814E22BA982269A0B0703CA10136AFAC07222FCC997109C392AD5AFCBCFAE4D1100A05C1557FBF3B628EBBDD5D582DE71C70DEACD85470131F7B5AA7B5FB0E1762F3E812DC5C081909A6CE284BEE33A4460D6B5C015F8DD1F3B387F6265556365DBC4F14BBD483DAE7DFBCB0BDF1C7A1ED97186D93A0891A2D80002E700A8F7F815BCAFCB91591D031939692760BE4A9331CF95E37C0973ADA7002F75F0850A0BE34FF42106A6AB3A3DDCDF7E926C25C07984DF34DF1E1

