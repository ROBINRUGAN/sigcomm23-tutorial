# p4testgen seed: 7
# Date generated: 2023-09-10-00:20:02.612
# Current statement coverage: 0.56
# Traces
# [Parser] MyParser
# [State] start
# [ExtractSuccess] headers.ethernet@0 | Condition: |*packetLen_bits(bit<32>)| >= 112; | Extract Size: 112 -> headers.ethernet.dstAddr = 0x15BF_6125_3A1A | headers.ethernet.srcAddr = 0x8223_D25E_4595 | headers.ethernet.etherType = 0x0800
# [State] parseIpv4
# [ExtractSuccess] headers.ipv4@112 | Condition: |*packetLen_bits(bit<32>)| >= 272; | Extract Size: 160 -> headers.ipv4.version = 0x0 | headers.ipv4.ihl = 0x0 | headers.ipv4.diffserv = 0x00 | headers.ipv4.totalLen = 0x0000 | headers.ipv4.identification = 0x0000 | headers.ipv4.flags = 0x0 | headers.ipv4.fragOffset = 0x0000 | headers.ipv4.ttl = 0x01 | headers.ipv4.protocol = 0x06 | headers.ipv4.hdrChecksum = 0x2168 | headers.ipv4.srcAddr = 0x5F9A_F8DE | headers.ipv4.dstAddr = 0xFEC1_DBDF
# [State] parseTcp
# [ExtractSuccess] headers.tcp@272 | Condition: |*packetLen_bits(bit<32>)| >= 432; | Extract Size: 160 -> headers.tcp.srcPort = 0x6E57 | headers.tcp.dstPort = 0xDFDF | headers.tcp.seqNo = 0x0000_0000 | headers.tcp.ackNo = 0x0000_0000 | headers.tcp.dataOffset = 0x0 | headers.tcp.res = 0x0 | headers.tcp.flags = 0x00 | headers.tcp.window = 0x0000 | headers.tcp.checksum = 0x0000 | headers.tcp.urgentPtr = 0x0000
# [State] accept
# [Control MyVerifyChecksum start]
# [Control MyIngress start]
# [mark_to_drop executed.]
# [Table Branch: MyIngress.validate.validate | Key(s): |bmv2_ingress_port(bit<9>)|, |pktvar_2(bit<16>)|, TaintedExpression(bit<12>), TaintedExpression(bit<16>), (bit<1>)0;, (bit<1>)1;, (bit<1>)0;, (bit<1>)0;| Chosen action: MyIngress.validate.setValidated]
# [Assume: applying condition: !0;]
# [If Statement]: true -> 1; -> true
# [Internal If Statement]: 1; -> 1; -> true
# [Table Branch: MyIngress.route.ipv4Route | Key(s): |pktvar_14(bit<32>)|| Chosen action: MyIngress.route.setForwarding]
# [Assume: applying condition: 0 < |MyIngress.route.ipv4Route_arg_MyIngress.route.setForwarding1(bit<9>)| && |MyIngress.route.ipv4Route_arg_MyIngress.route.setForwarding1(bit<9>)| <= 64;]
# [Internal If Statement]: 0; -> 0; -> false
# [Table Branch: MyIngress.acl.acl | Key(s): |bmv2_ingress_port(bit<9>)|, |MyIngress.route.ipv4Route_arg_MyIngress.route.setForwarding1(bit<9>)|, 0, |pktvar_1(bit<48>)|, |pktvar_0(bit<48>)|, |pktvar_2(bit<16>)|, |pktvar_13(bit<32>)|, |pktvar_14(bit<32>)|, |pktvar_10(bit<8>)|, TaintedExpression(bit<64>), TaintedExpression(bit<64>), TaintedExpression(bit<8>), |pktvar_11(bit<8>)|, |pktvar_15(bit<16>)|, |pktvar_16(bit<16>)|| Chosen action: MyIngress.acl.allow]
# [If Statement]: true -> 1; -> true
# [If Statement]: false -> 0; -> false
# [If Statement]: true -> 1; -> true
# [Internal If Statement]: 1; -> 1; -> true
# [If Statement]: headers.ipv4.ttl == 0 -> |pktvar_10(bit<8>)| + 255 == 0; -> true
# [If Statement]: false -> 0; -> false
# [Internal If Statement]: 0 != 0; -> 0 != 0; -> false
# [Control MyEgress start]
# [Control MyUpdateChecksum start]
# [Control MyDeparser start]
# [Emit] headers.ethernet -> headers.ethernet.dstAddr = 0x0000_0000_0000 | headers.ethernet.srcAddr = 0x8223_D25E_4595 | headers.ethernet.etherType = 0x0800
# [Invalid emit: headers.vlan]
# [Emit] headers.ipv4 -> headers.ipv4.version = 0x0 | headers.ipv4.ihl = 0x0 | headers.ipv4.diffserv = 0x00 | headers.ipv4.totalLen = 0x0000 | headers.ipv4.identification = 0x0000 | headers.ipv4.flags = 0x0 | headers.ipv4.fragOffset = 0x0000 | headers.ipv4.ttl = 0x00 | headers.ipv4.protocol = 0x06 | headers.ipv4.hdrChecksum = 0x0000 | headers.ipv4.srcAddr = 0x5F9A_F8DE | headers.ipv4.dstAddr = 0xFEC1_DBDF
# [Invalid emit: headers.ipv6]
# [Invalid emit: headers.innerIpv4]
# [Emit] headers.tcp -> headers.tcp.srcPort = 0x6E57 | headers.tcp.dstPort = 0xDFDF | headers.tcp.seqNo = 0x0000_0000 | headers.tcp.ackNo = 0x0000_0000 | headers.tcp.dataOffset = 0x0 | headers.tcp.res = 0x0 | headers.tcp.flags = 0x00 | headers.tcp.window = 0x0000 | headers.tcp.checksum = 0x0000 | headers.tcp.urgentPtr = 0x0000
# [Invalid emit: headers.udp]
# [Prepending the emit buffer to the program packet]
# [Internal If Statement]: 511 == 511; -> 511 == 511; -> true
# [Packet marked dropped]

# Table MyIngress.validate.validate
add "MyIngress.validate.validate" 1 "headers.ethernet.etherType":0x0800 "headers.innerIpv4.$valid$":0x0 "headers.ipv4.$valid$":0x1 "headers.ipv6.$valid$":0x0 "headers.vlan.$valid$":0x0 "headers.vlan.etherType":0b**************** "headers.vlan.vlanId":0b************ "standard_metadata.ingress_port":0x0BF "MyIngress.validate.setValidated"()

# Table MyIngress.route.ipv4Route
add "MyIngress.route.ipv4Route" 1 "headers.ipv4.dstAddr":0b*****1***1***0**1*0***1***0*1*1* "MyIngress.route.setForwarding"("dstAddr":0x000000000000,"egressPort":0x029)

# Table MyIngress.acl.acl
add "MyIngress.acl.acl" 1 "headers.ethernet.dstAddr":0xAFFEAD7C5352 "headers.ethernet.etherType":0x0800 "headers.ethernet.srcAddr":0x364E6A6EEF6E "headers.ipv4.dstAddr":0b1***111*11****0*11*1***11*****11 "headers.ipv4.srcAddr":0b01***11110*1*010*1*1********111* "headers.ipv4.ttl":0b0*00**0* "headers.ipv6.dstAddr":0b**************************************************************** "headers.ipv6.hopLimit":0b******** "headers.ipv6.srcAddr":0b**************************************************************** "metadata.egressPort":0b00*1*1*** "metadata.l3Protocol":0b***0*1** "metadata.l4DstPort":0b1*11**1*11*1*10* "metadata.l4SrcPort":0b*10*1*1*1*1*10** "metadata.vlan":0b*0*0**0**0** "standard_metadata.ingress_port":0b***1**1*1 "MyIngress.acl.allow"()


packet

